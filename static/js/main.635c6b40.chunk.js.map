{"version":3,"sources":["components/CurrentTemperature/CurrentTemperature.tsx","helpers/url.ts","components/CurrentWeather/CurrentWeather.tsx","components/InfoElement/InfoElement.tsx","components/MainInfo/MainInfo.tsx","helpers/date.ts","components/MinMaxTemperature/MinMaxTemperature.tsx","img/weather-icons/humidity.svg","img/weather-icons/barometer.svg","img/weather-icons/wind.svg","img/weather-icons/sunrise.svg","img/weather-icons/sunset.svg","img/weather-icons/sand-clock.svg","components/WeekSlider/WeekSlider.tsx","components/MainContainer/MainContainer.tsx","img/city-day-image.png","img/city-night-image.png","components/Loader/Loader.tsx","components/EnterName/EnterName.tsx","components/LaunchScreen/LaunchScreen.tsx","helpers/storage.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CurrentTemperature","temperature","className","Math","floor","getIconUrl","iconId","CurrentWeather","description","icon","capitalizedDescription","Array","from","toUpperCase","convertedDescription","join","src","alt","InfoElement","picture","parameter","isSliderElement","minTemp","maxTemp","MainInfo","currentDate","Date","dayName","getDay","dayOfMonth","getDate","monthName","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","date","width","height","viewBox","fill","xmlns","d","MinMaxTemperature","min","max","WeekSlider","weeklyForecast","slidesPerView","map","day","weather","dt","temp","iconUrl","shortDayName","getShortDayName","dayNumber","MainContainer","weatherData","current","daily","humidity","pressure","wind_speed","sunset","sunrise","minMaxTemperature","slice","convertedPressure","sunriseDateObject","sunsetDateObject","sunriseTime","sunsetTime","dayTimeInSeconds","dayTimeInHours","dayTimeMinutes","humidityIcon","sunriseIcon","barometer","sunsetIcon","wind","sandClock","Loader","EnterName","onClick","onChange","value","type","id","action","placeholder","required","htmlFor","data-title","LaunchScreen","fieldName","setVisibility","userName","localStorage","getItem","useState","userNameChanged","setUserNameChanged","inputFieldValue","setInputFieldValue","useEffect","setTimeout","setItem","setStorageValue","event","target","App","isLoading","setLoading","isLaunchScreenVisible","setLaunchScreenVisibility","setWeatherData","fetch","process","then","response","json","result","time","showDayImage","style","backgroundImage","dayImage","nightImage","removeItem","window","location","reload","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.635c6b40.chunk.js","sourcesContent":["import './style.scss'\r\n\r\nconst CurrentTemperature = ({ temperature }: { temperature: number }): JSX.Element => (\r\n  <div className=\"current-tepmerature-container\">\r\n    <span>{Math.floor(temperature)}</span>\r\n    <span>Â°C</span>\r\n  </div>\r\n)\r\n\r\nexport default CurrentTemperature","const getIconUrl = (iconId: string): string => `http://openweathermap.org/img/wn/${iconId}@2x.png`\r\n\r\nexport default getIconUrl","import getIconUrl from '../../helpers/url'\r\nimport { WeatherObject } from '../../interfaces/CommonInterfaces'\r\nimport './style.scss'\r\n\r\nconst CurrentWeather = ({ description, icon }: WeatherObject): JSX.Element => {\r\n  const capitalizedDescription = Array.from(description)\r\n  capitalizedDescription[0] = capitalizedDescription[0].toUpperCase()\r\n  const convertedDescription = capitalizedDescription.join('')\r\n\r\n  return (\r\n    <div className=\"current-weather-container\">\r\n      <img src={getIconUrl(icon)} alt=\"\"/>\r\n      <div className=\"current-weather-container__text\">{convertedDescription}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CurrentWeather","import './style.scss'\r\n\r\ntype Props = {\r\n  picture: string,\r\n  parameter: string,\r\n  description?: string;\r\n  minTemp?: number;\r\n  maxTemp?: number;\r\n  isSliderElement?: boolean;\r\n}\r\n\r\nconst InfoElement = ({ picture, parameter, description, isSliderElement, minTemp, maxTemp }: Props): JSX.Element => {\r\n  return (\r\n    <div className={`info-element-container ${isSliderElement ? 'info-element-container--slider' : ''}`}>\r\n      <img className=\"info-element-container__picture\" src={picture} alt=\"\"/>\r\n      <div className=\"info-element-container__parameter\">{parameter}</div>\r\n      <div className=\"info-element-container__description\">\r\n        {minTemp || maxTemp ? (\r\n          <>\r\n            <span>{maxTemp}Â°C&#8593;</span>&nbsp;\r\n            <span>{minTemp}Â°C&#8595;</span>\r\n          </>\r\n        ) : description}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InfoElement","import { getFullDayName, getMonthName } from '../../helpers/date'\r\nimport './style.scss'\r\n\r\nconst MainInfo = (): JSX.Element => {\r\n  const currentDate = new Date()\r\n  const dayName = getFullDayName(currentDate.getDay())\r\n  const dayOfMonth = currentDate.getDate()\r\n  const monthName = getMonthName(currentDate.getMonth())\r\n  const year = currentDate.getFullYear()\r\n  const hours = currentDate.getHours()\r\n  const minutes = currentDate.getMinutes()\r\n\r\n  const date = `${dayName}, ${dayOfMonth} ${monthName} ${year} | ${hours}:${minutes}`\r\n\r\n  return (\r\n    <div className=\"main-info-container\">\r\n      <div className=\"main-info-container__date\">{date}</div>\r\n      <div className=\"main-info-container__location\">\r\n        ÐÐ¾ÑÐºÐ²Ð°, Ð Ð¾ÑÑÐ¸Ñ\r\n        <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path d=\"M9.93804 2.98668C9.89533 2.82659 9.80859 2.65601 9.74442 2.50667C8.97656 0.661332 7.29882 0 5.94413 0C4.13063 0 2.13327 1.21603 1.86661 3.72256V4.23465C1.86661 4.25603 1.87397 4.448 1.88444 4.54403C2.03392 5.73858 2.97651 7.00812 3.68047 8.20267C4.43783 9.48251 5.22371 10.7415 6.0023 12C6.4824 11.1787 6.96076 10.3467 7.42992 9.54668C7.55779 9.3119 7.70621 9.07727 7.83422 8.85318C7.91953 8.70397 8.08252 8.55476 8.15699 8.41594C8.91432 7.02936 10.1333 5.63206 10.1333 4.256V3.6907C10.1334 3.54152 9.94845 3.01885 9.93804 2.98668ZM5.97733 5.5574C5.44425 5.5574 4.86076 5.29085 4.57276 4.55472C4.52985 4.43754 4.53331 4.20271 4.53331 4.1812V3.85053C4.53331 2.9121 5.33012 2.48535 6.02331 2.48535C6.8767 2.48535 7.53672 3.16811 7.53672 4.0215C7.53672 4.87487 6.83072 5.5574 5.97733 5.5574Z\" fill=\"#0D9FEA\"/>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MainInfo","const getShortDayName = (day: number): string => {\r\n  const days = ['ÐÑ', 'ÐÐ¾Ð½', 'ÐÑ', 'Ð¡Ñ', 'Ð§Ñ', 'ÐÑ', 'Ð¡Ð±']\r\n  return days[day]\r\n}\r\n\r\nconst getFullDayName = (day: number): string => {\r\n  const days = ['ÐÐ¾ÑÐºÑÐµÑÐµÐ½ÑÐµ', 'ÐÐ¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº', 'ÐÑÐ¾ÑÐ½Ð¸Ðº', 'Ð¡ÑÐµÐ´Ð°', 'Ð§ÐµÑÐ²ÐµÑÐ³', 'ÐÑÑÐ½Ð¸ÑÐ°', 'Ð¡ÑÐ±Ð±Ð¾ÑÐ°']\r\n  return days[day]\r\n}\r\n\r\nconst getMonthName = (month: number): string => {\r\n  const months = ['ÑÐ½Ð²Ð°ÑÑ', 'ÑÐµÐ²ÑÐ°Ð»Ñ', 'Ð¼Ð°ÑÑÐ°', 'Ð°Ð¿ÑÐµÐ»Ñ', 'Ð¼Ð°Ñ', 'Ð¸ÑÐ½Ñ', 'Ð¸ÑÐ»Ñ', 'Ð°Ð²Ð³ÑÑÑÐ°', 'ÑÐµÐ½ÑÑÐ±ÑÑ', 'Ð¾ÐºÑÑÐ±ÑÑ', 'Ð½Ð¾ÑÐ±ÑÑ', 'Ð´ÐµÐºÐ°Ð±ÑÑ']\r\n  return months[month]\r\n}\r\n\r\nexport {\r\n  getShortDayName,\r\n  getFullDayName,\r\n  getMonthName,\r\n}","import './style.scss'\r\n\r\ntype Props = {\r\n  min: number;\r\n  max: number;\r\n}\r\n\r\nconst MinMaxTemperature = ({ min, max }: Props): JSX.Element => (\r\n  <div className=\"min-max-temperature-container\">\r\n      <div className=\"min-max-temperature-container__item\">{Math.floor(max)}Â°C&nbsp;\r\n        <span>&#8593;</span>\r\n      </div>\r\n      <div className=\"min-max-temperature-container__item\">{Math.floor(min)}Â°C&nbsp;\r\n        <span>&#8595;</span>\r\n      </div>\r\n  </div>\r\n)\r\n\r\nexport default MinMaxTemperature","export default __webpack_public_path__ + \"static/media/humidity.e9d57c9d.svg\";","export default __webpack_public_path__ + \"static/media/barometer.2c6bccc2.svg\";","export default __webpack_public_path__ + \"static/media/wind.410c93d3.svg\";","export default __webpack_public_path__ + \"static/media/sunrise.48ef4430.svg\";","export default __webpack_public_path__ + \"static/media/sunset.3b442de3.svg\";","export default __webpack_public_path__ + \"static/media/sand-clock.574e989c.svg\";","import { Swiper, SwiperSlide } from 'swiper/react'\r\nimport { WeatherAtMoment, Temperature } from '../../interfaces/CommonInterfaces'\r\nimport InfoElement from \"../InfoElement/InfoElement\"\r\nimport { getShortDayName } from '../../helpers/date'\r\nimport getIconUrl from '../../helpers/url'\r\nimport './style.scss'\r\nimport 'swiper/swiper.scss'\r\n\r\nconst WeekSlider = ({ weeklyForecast }: { weeklyForecast: WeatherAtMoment<Temperature>[] }): JSX.Element => {\r\n  return (\r\n    <div className=\"week-slider-container\">\r\n      <Swiper\r\n        slidesPerView={3}\r\n      >\r\n        {weeklyForecast.map((day) => {\r\n          const { weather, dt, temp: { min, max } } = day\r\n          const { icon } = weather[0]\r\n          const iconUrl = getIconUrl(icon)\r\n          const currentDate = new Date(dt * 1000)\r\n          const shortDayName = getShortDayName(currentDate.getDay())\r\n          const dayNumber = currentDate.getDate()\r\n          return (\r\n            <SwiperSlide key={dt}>\r\n              <InfoElement\r\n                picture={iconUrl}\r\n                parameter={`${shortDayName}, ${dayNumber}`}\r\n                minTemp={Math.floor(min)}\r\n                maxTemp={Math.floor(max)}\r\n                isSliderElement\r\n              />\r\n            </SwiperSlide>\r\n          )\r\n        })}\r\n      </Swiper>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WeekSlider","import CurrentTemperature from '../CurrentTemperature/CurrentTemperature'\r\nimport CurrentWeather from '../CurrentWeather/CurrentWeather'\r\nimport InfoElement from '../InfoElement/InfoElement'\r\nimport MainInfo from '../MainInfo/MainInfo'\r\nimport MinMaxTemperature from '../MinMaxTemperature/MinMaxTemperature'\r\nimport humidityIcon from '../../img/weather-icons/humidity.svg'\r\nimport barometer from '../../img/weather-icons/barometer.svg'\r\nimport wind from '../../img/weather-icons/wind.svg'\r\nimport sunriseIcon from '../../img/weather-icons/sunrise.svg'\r\nimport sunsetIcon from '../../img/weather-icons/sunset.svg'\r\nimport sandClock from '../../img/weather-icons/sand-clock.svg'\r\nimport './style.scss'\r\nimport WeekSlider from '../WeekSlider/WeekSlider'\r\nimport { WeatherData } from '../../interfaces/CommonInterfaces'\r\n\r\ntype Props = {\r\n  weatherData: WeatherData;\r\n}\r\n\r\nconst MainContainer = ({ weatherData }: Props): JSX.Element => {\r\n  const { current, daily} = weatherData\r\n  const { weather, temp, humidity, pressure, wind_speed, sunset, sunrise } = current\r\n  const { description, icon } = weather[0]\r\n  const { temp: minMaxTemperature } = daily[0]\r\n  const { min, max} = minMaxTemperature\r\n  const weeklyForecast = daily.slice(1)\r\n  const convertedPressure = Math.floor(pressure * 0.750064)\r\n  const sunriseDateObject = new Date(sunrise * 1000)\r\n  const sunsetDateObject = new Date(sunset * 1000)\r\n  const sunriseTime = `${sunriseDateObject.getHours()}:${sunriseDateObject.getMinutes()}`\r\n  const sunsetTime = `${sunsetDateObject.getHours()}:${sunsetDateObject.getMinutes()}`\r\n  const dayTimeInSeconds = (sunset - sunrise)\r\n  const dayTimeInHours = Math.floor(dayTimeInSeconds / 3600)\r\n  const dayTimeMinutes = Math.floor(dayTimeInSeconds % 3600 / 60)\r\n\r\n  return (\r\n    <main className=\"main-container\">\r\n    <MainInfo />\r\n    <div className=\"info-column-container\">\r\n      <div className=\"info-column-container__column\">\r\n        <div className=\"info-column-container__column-item\">\r\n          <CurrentWeather description={description} icon={icon} />\r\n        </div>\r\n        <div className=\"info-column-container__column-item\">\r\n          <InfoElement picture={humidityIcon} parameter={`${humidity}%`} description=\"ÐÐ»Ð°Ð¶Ð½Ð¾ÑÑÑ\"/>\r\n        </div>\r\n        <div className=\"info-column-container__column-item\">\r\n          <InfoElement picture={sunriseIcon} parameter={sunriseTime} description=\"Ð Ð°ÑÑÐ²ÐµÑ\"/>\r\n        </div>\r\n      </div>\r\n      <div className=\"info-column-container__column\">\r\n        <div className=\"info-column-container__column-item\">\r\n          <CurrentTemperature temperature={temp} />\r\n        </div>\r\n        <div className=\"info-column-container__column-item\">\r\n          <InfoElement picture={barometer} parameter={`${convertedPressure} Ð¼Ð¼ ÑÑ ÑÑ`} description=\"ÐÐ°Ð²Ð»ÐµÐ½Ð¸Ðµ\"/>\r\n        </div>\r\n        <div className=\"info-column-container__column-item\">\r\n          <InfoElement picture={sunsetIcon} parameter={sunsetTime} description=\"ÐÐ°ÐºÐ°Ñ\"/>\r\n        </div>\r\n      </div>\r\n      <div className=\"info-column-container__column\">\r\n        <div className=\"info-column-container__column-item\">\r\n          <MinMaxTemperature min={min} max={max} />\r\n        </div>\r\n        <div className=\"info-column-container__column-item\">\r\n          <InfoElement picture={wind} parameter={`${wind_speed} Ð¼/Ñ`} description=\"ÐÐµÑÐµÑ\"/>\r\n        </div>\r\n        <div className=\"info-column-container__column-item\">\r\n          <InfoElement picture={sandClock} parameter={`${dayTimeInHours}:${dayTimeMinutes}`} description=\"Ð¡Ð²ÐµÑÐ¾Ð²Ð¾Ð¹ Ð´ÐµÐ½Ñ\"/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <WeekSlider weeklyForecast={weeklyForecast} />\r\n  </main>\r\n  )\r\n}\r\n  \r\nexport default MainContainer","export default __webpack_public_path__ + \"static/media/city-day-image.54db99b7.png\";","export default __webpack_public_path__ + \"static/media/city-night-image.3aa739ea.png\";","import './style.scss'\r\n\r\nconst Loader = (): JSX.Element => (\r\n  <div className=\"lds-heart\"><div></div></div>\r\n)\r\n\r\nexport default Loader","import React from \"react\"\r\nimport './style.scss'\r\n\r\ntype Props = {\r\n  onClick: () => void;\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  value: string;\r\n}\r\n\r\nconst EnterName = ({ onClick, onChange, value }: Props): JSX.Element => {\r\n  return (\r\n    <div>\r\n      <input className=\"c-checkbox\" type=\"checkbox\" id=\"checkbox\"/>\r\n      <div className=\"c-formContainer\">\r\n        <form className=\"c-form\" action=\"\">\r\n          <input className=\"c-form__input\" placeholder=\"ÐÐ¼Ñ\" type=\"text\" onChange={onChange} value={value} required/>\r\n          <label className=\"c-form__buttonLabel\" htmlFor=\"checkbox\" onClick={onClick}>\r\n            <button className=\"c-form__button\" type=\"button\">Ð¡Ð¾ÑÑÐ°Ð½Ð¸ÑÑ</button>\r\n          </label>\r\n          <label className=\"c-form__toggle\" htmlFor=\"checkbox\" data-title=\"ÐÐ²ÐµÑÑÐ¸ Ð¸Ð¼Ñ\"></label>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EnterName","import React, { useEffect, useState } from \"react\"\r\nimport { getStorageValue, setStorageValue } from \"../../helpers/storage\"\r\nimport EnterName from \"../EnterName/EnterName\"\r\nimport './style.scss'\r\n\r\ntype Props = {\r\n  setVisibility: (visibiliy: boolean) => void\r\n}\r\n\r\n\r\nconst LaunchScreen = ({ setVisibility }: Props) => {\r\n  const userName = getStorageValue('userName')\r\n  const [userNameChanged, setUserNameChanged] = useState(false) \r\n  const [inputFieldValue, setInputFieldValue] = useState('')\r\n  const onUserNameChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setInputFieldValue(event.target.value)\r\n  }\r\n  const onConfirmUserNameButtonClicked = (): void => {\r\n    setStorageValue('userName', inputFieldValue)\r\n    setUserNameChanged(!userNameChanged)\r\n  }\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      if (userNameChanged || userName) {\r\n        setVisibility(false)\r\n      }\r\n    }, 2000)\r\n  }, [setVisibility, userNameChanged, userName])\r\n  return (\r\n    <div className=\"launch-screen\">\r\n      <h1>ÐÑÐ¸Ð²ÐµÑ,<br/>{userName ? userName : 'ÐºÐ°Ðº Ðº ÑÐµÐ±Ðµ Ð¾Ð±ÑÐ°ÑÐ°ÑÑÑÑ?'}</h1>\r\n      {!userName && <EnterName onClick={onConfirmUserNameButtonClicked} onChange={onUserNameChange} value={inputFieldValue} />}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LaunchScreen","const setStorageValue = (fieldName: string, value: string):void => {\r\n  localStorage.setItem(fieldName, value)\r\n}\r\n\r\nconst getStorageValue = (fieldName: string):string | null => {\r\n  return localStorage.getItem(fieldName)\r\n}\r\n\r\nconst removeStorageValue = (fieldName: string):void => {\r\n  localStorage.removeItem(fieldName)\r\n}\r\n\r\n\r\nexport {\r\n  setStorageValue,\r\n  getStorageValue,\r\n  removeStorageValue,\r\n}","import MainContainer from './components/MainContainer/MainContainer';\r\nimport dayImage from './img/city-day-image.png';\r\nimport nightImage from './img/city-night-image.png';\r\nimport './App.scss';\r\nimport { useEffect, useState } from 'react';\r\nimport Loader from './components/Loader/Loader';\r\nimport { WeatherData } from './interfaces/CommonInterfaces'\r\nimport LaunchScreen from './components/LaunchScreen/LaunchScreen';\r\nimport { removeStorageValue } from './helpers/storage';\r\n\r\nfunction App() {\r\n  const [isLoading, setLoading] = useState(true)\r\n  const [isLaunchScreenVisible, setLaunchScreenVisibility] = useState(true)\r\n  const [weatherData, setWeatherData] = useState<WeatherData>({} as WeatherData)\r\n  useEffect(() => {\r\n    fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=55.75222&lon=37.61556&exclude=hourly,minutely,alerts&appid=${process.env.REACT_APP_API_KEY}&units=metric&lang=ru`)\r\n      .then(response => response.json())\r\n      .then(result => {\r\n        setWeatherData(result)\r\n        setLoading(false)\r\n      })\r\n    setLoading(false)\r\n  }, [])\r\n  const time = new Date().getHours()\r\n  const showDayImage = time > 6 && time < 20\r\n\r\n  const changeUserName = () => {\r\n    removeStorageValue('userName')\r\n    window.location.reload()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Loader/>}\r\n      {isLaunchScreenVisible && <LaunchScreen setVisibility={setLaunchScreenVisibility}/>}\r\n      {!isLoading && !isLaunchScreenVisible && (\r\n        <div className=\"app-container\" style={{ backgroundImage: `url(${showDayImage ? dayImage : nightImage})`}}>\r\n          <div className=\"app-container__header-wrapper\">\r\n            <div className=\"app-container__header-wrapper--reset-name\" onClick={changeUserName}>ÐÑÑÐ³Ð¾Ðµ Ð¿ÑÐ¸Ð²ÐµÑÑÑÐ²Ð¸Ðµ</div>\r\n          </div>\r\n          <MainContainer weatherData={weatherData} />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}